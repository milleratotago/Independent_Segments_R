% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SegmentedHypTestResult.R
\name{SegmentedHypTestResult}
\alias{SegmentedHypTestResult}
\title{SegmentedHypTestResult Constructor}
\usage{
SegmentedHypTestResult(
  max_n_segments,
  pr_true_pos = 0,
  pr_false_pos = 0,
  pr_true_neg = 0,
  pr_false_neg = 0,
  pr_reject_total = 0,
  exp_n_subj = 0,
  exp_n_subj_sqr = 0,
  exp_effect_size = 0,
  n_simulations = 0
)
}
\arguments{
\item{max_n_segments}{Maximum number of segments that can be run in the
described experiment before termination}

\item{pr_true_pos}{Overall probability of a hit - reject Ho when it is false
(there is an effect)}

\item{pr_false_pos}{Overall probability of a false alarm - reject Ho when it is
true (there is no effect)}

\item{pr_true_neg}{Overall probability of a correct failure to reject}

\item{pr_false_neg}{Overall probability of a miss - failure to reject when there is really
an effect}

\item{pr_reject_total}{Overall probability of rejecting (correctly or
incorrectly) at any of the k segments}

\item{exp_n_subj}{Expected (mean across infinite iterations) number of
subjects used when testing for this effect.}

\item{exp_n_subj_sqr}{Expected (mean across infinite iterations) square of
the number of subjects used. Useful for variance computations.}

\item{exp_effect_size}{Expected (mean across infinite iterations) observed
effect size (not generally equal to the true effect size)}

\item{n_simulations}{0 for computed results, or the number of
simulations for simulated results (to allow extension to simulation)}
}
\value{
SegmentedHypTestResult instance
}
\description{
A SegmentedHypTestResult instance holds information about the expected
outcomes of a segmented hypothesis testing study for given maximum number of
segments, alpha total, alpha strong, and statistical procedure.These objects
are typically created with no parameter values supplied so all fields default
to 'empty', and initisalised during computation to hold the simulated or
numerically-derived expected outcomes for the scenario. See
segHT::run_scenario.SegmentedHypTestEngine for an example.
}
